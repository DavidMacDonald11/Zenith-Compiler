// Code generated from ZenithLexer.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ZenithLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var ZenithLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func zenithlexerLexerInit() {
	staticData := &ZenithLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'$'", "'$?'", "'&'", "'&?'", "'@'", "'~'", "'!'", "'+'", "'-'",
		"'*'", "'/'", "'%'", "'if'", "'else'", "'true'", "'false'", "'null'",
		"'='", "':='", "", "", "", "'('", "')'", "'{'", "'}'", "';'",
	}
	staticData.SymbolicNames = []string{
		"", "OWN_PTR", "NULL_OWN_PTR", "PTR", "NULL_PTR", "AT", "BIT_NOT", "NOT",
		"PLUS", "MINUS", "TIMES", "DIVIDE", "REM", "IF", "ELSE", "TRUE", "FALSE",
		"NULL", "ASSIGN", "INIT_ASSIGN", "TYPE", "NUM", "ID", "LPAREN", "RPAREN",
		"LBRACE", "RBRACE", "SEMICOLON", "NL", "IGNORED",
	}
	staticData.RuleNames = []string{
		"OWN_PTR", "NULL_OWN_PTR", "PTR", "NULL_PTR", "AT", "BIT_NOT", "NOT",
		"PLUS", "MINUS", "TIMES", "DIVIDE", "REM", "IF", "ELSE", "TRUE", "FALSE",
		"NULL", "ASSIGN", "INIT_ASSIGN", "TYPE", "NUM", "DEC_NUM", "DEC_SEG",
		"BIN_NUM", "BIN_SEG", "OCT_NUM", "OCT_SEG", "HEX_NUM", "HEX_SEG", "HEX_DIGIT",
		"ID", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", "NL", "IGNORED",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 29, 394, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
		3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1,
		9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1,
		15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17,
		1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 200, 8, 19, 1,
		20, 1, 20, 1, 20, 1, 20, 3, 20, 206, 8, 20, 1, 21, 1, 21, 5, 21, 210, 8,
		21, 10, 21, 12, 21, 213, 9, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21,
		220, 8, 21, 10, 21, 12, 21, 223, 9, 21, 3, 21, 225, 8, 21, 1, 22, 1, 22,
		5, 22, 229, 8, 22, 10, 22, 12, 22, 232, 9, 22, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 5, 23, 239, 8, 23, 10, 23, 12, 23, 242, 9, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 5, 23, 249, 8, 23, 10, 23, 12, 23, 252, 9, 23, 3,
		23, 254, 8, 23, 1, 24, 5, 24, 257, 8, 24, 10, 24, 12, 24, 260, 9, 24, 1,
		24, 1, 24, 5, 24, 264, 8, 24, 10, 24, 12, 24, 267, 9, 24, 1, 25, 1, 25,
		1, 25, 1, 25, 1, 25, 5, 25, 274, 8, 25, 10, 25, 12, 25, 277, 9, 25, 1,
		25, 1, 25, 1, 25, 1, 25, 1, 25, 5, 25, 284, 8, 25, 10, 25, 12, 25, 287,
		9, 25, 3, 25, 289, 8, 25, 1, 26, 5, 26, 292, 8, 26, 10, 26, 12, 26, 295,
		9, 26, 1, 26, 1, 26, 5, 26, 299, 8, 26, 10, 26, 12, 26, 302, 9, 26, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 5, 27, 310, 8, 27, 10, 27, 12, 27,
		313, 9, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 5, 27, 321, 8, 27,
		10, 27, 12, 27, 324, 9, 27, 3, 27, 326, 8, 27, 1, 28, 1, 28, 5, 28, 330,
		8, 28, 10, 28, 12, 28, 333, 9, 28, 1, 28, 1, 28, 1, 28, 5, 28, 338, 8,
		28, 10, 28, 12, 28, 341, 9, 28, 1, 29, 1, 29, 1, 30, 1, 30, 5, 30, 347,
		8, 30, 10, 30, 12, 30, 350, 9, 30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1,
		33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 3, 36, 363, 8, 36, 1, 36, 4, 36,
		366, 8, 36, 11, 36, 12, 36, 367, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 5,
		37, 375, 8, 37, 10, 37, 12, 37, 378, 9, 37, 1, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 5, 37, 386, 8, 37, 10, 37, 12, 37, 389, 9, 37, 3, 37, 391,
		8, 37, 1, 37, 1, 37, 1, 376, 0, 38, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6,
		13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31,
		16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 0, 45, 0, 47, 0, 49, 0,
		51, 0, 53, 0, 55, 0, 57, 0, 59, 0, 61, 22, 63, 23, 65, 24, 67, 25, 69,
		26, 71, 27, 73, 28, 75, 29, 1, 0, 12, 2, 0, 48, 57, 95, 95, 1, 0, 48, 57,
		2, 0, 48, 49, 95, 95, 1, 0, 48, 49, 2, 0, 48, 55, 95, 95, 1, 0, 48, 55,
		3, 0, 48, 57, 65, 70, 97, 102, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48,
		57, 65, 90, 95, 95, 97, 122, 1, 0, 13, 13, 1, 0, 10, 10, 2, 0, 9, 9, 32,
		32, 433, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1,
		0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15,
		1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0,
		23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0,
		0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0,
		0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0,
		0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1,
		0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 1, 77, 1, 0, 0, 0, 3, 79,
		1, 0, 0, 0, 5, 82, 1, 0, 0, 0, 7, 84, 1, 0, 0, 0, 9, 87, 1, 0, 0, 0, 11,
		89, 1, 0, 0, 0, 13, 91, 1, 0, 0, 0, 15, 93, 1, 0, 0, 0, 17, 95, 1, 0, 0,
		0, 19, 97, 1, 0, 0, 0, 21, 99, 1, 0, 0, 0, 23, 101, 1, 0, 0, 0, 25, 103,
		1, 0, 0, 0, 27, 106, 1, 0, 0, 0, 29, 111, 1, 0, 0, 0, 31, 116, 1, 0, 0,
		0, 33, 122, 1, 0, 0, 0, 35, 127, 1, 0, 0, 0, 37, 129, 1, 0, 0, 0, 39, 199,
		1, 0, 0, 0, 41, 205, 1, 0, 0, 0, 43, 224, 1, 0, 0, 0, 45, 226, 1, 0, 0,
		0, 47, 233, 1, 0, 0, 0, 49, 258, 1, 0, 0, 0, 51, 268, 1, 0, 0, 0, 53, 293,
		1, 0, 0, 0, 55, 303, 1, 0, 0, 0, 57, 331, 1, 0, 0, 0, 59, 342, 1, 0, 0,
		0, 61, 344, 1, 0, 0, 0, 63, 351, 1, 0, 0, 0, 65, 353, 1, 0, 0, 0, 67, 355,
		1, 0, 0, 0, 69, 357, 1, 0, 0, 0, 71, 359, 1, 0, 0, 0, 73, 365, 1, 0, 0,
		0, 75, 390, 1, 0, 0, 0, 77, 78, 5, 36, 0, 0, 78, 2, 1, 0, 0, 0, 79, 80,
		5, 36, 0, 0, 80, 81, 5, 63, 0, 0, 81, 4, 1, 0, 0, 0, 82, 83, 5, 38, 0,
		0, 83, 6, 1, 0, 0, 0, 84, 85, 5, 38, 0, 0, 85, 86, 5, 63, 0, 0, 86, 8,
		1, 0, 0, 0, 87, 88, 5, 64, 0, 0, 88, 10, 1, 0, 0, 0, 89, 90, 5, 126, 0,
		0, 90, 12, 1, 0, 0, 0, 91, 92, 5, 33, 0, 0, 92, 14, 1, 0, 0, 0, 93, 94,
		5, 43, 0, 0, 94, 16, 1, 0, 0, 0, 95, 96, 5, 45, 0, 0, 96, 18, 1, 0, 0,
		0, 97, 98, 5, 42, 0, 0, 98, 20, 1, 0, 0, 0, 99, 100, 5, 47, 0, 0, 100,
		22, 1, 0, 0, 0, 101, 102, 5, 37, 0, 0, 102, 24, 1, 0, 0, 0, 103, 104, 5,
		105, 0, 0, 104, 105, 5, 102, 0, 0, 105, 26, 1, 0, 0, 0, 106, 107, 5, 101,
		0, 0, 107, 108, 5, 108, 0, 0, 108, 109, 5, 115, 0, 0, 109, 110, 5, 101,
		0, 0, 110, 28, 1, 0, 0, 0, 111, 112, 5, 116, 0, 0, 112, 113, 5, 114, 0,
		0, 113, 114, 5, 117, 0, 0, 114, 115, 5, 101, 0, 0, 115, 30, 1, 0, 0, 0,
		116, 117, 5, 102, 0, 0, 117, 118, 5, 97, 0, 0, 118, 119, 5, 108, 0, 0,
		119, 120, 5, 115, 0, 0, 120, 121, 5, 101, 0, 0, 121, 32, 1, 0, 0, 0, 122,
		123, 5, 110, 0, 0, 123, 124, 5, 117, 0, 0, 124, 125, 5, 108, 0, 0, 125,
		126, 5, 108, 0, 0, 126, 34, 1, 0, 0, 0, 127, 128, 5, 61, 0, 0, 128, 36,
		1, 0, 0, 0, 129, 130, 5, 58, 0, 0, 130, 131, 5, 61, 0, 0, 131, 38, 1, 0,
		0, 0, 132, 133, 5, 85, 0, 0, 133, 134, 5, 73, 0, 0, 134, 135, 5, 110, 0,
		0, 135, 136, 5, 116, 0, 0, 136, 200, 5, 56, 0, 0, 137, 138, 5, 85, 0, 0,
		138, 139, 5, 73, 0, 0, 139, 140, 5, 110, 0, 0, 140, 141, 5, 116, 0, 0,
		141, 142, 5, 49, 0, 0, 142, 200, 5, 54, 0, 0, 143, 144, 5, 85, 0, 0, 144,
		145, 5, 73, 0, 0, 145, 146, 5, 110, 0, 0, 146, 147, 5, 116, 0, 0, 147,
		148, 5, 51, 0, 0, 148, 200, 5, 50, 0, 0, 149, 150, 5, 85, 0, 0, 150, 151,
		5, 73, 0, 0, 151, 152, 5, 110, 0, 0, 152, 153, 5, 116, 0, 0, 153, 154,
		5, 54, 0, 0, 154, 200, 5, 52, 0, 0, 155, 156, 5, 85, 0, 0, 156, 157, 5,
		73, 0, 0, 157, 158, 5, 110, 0, 0, 158, 200, 5, 116, 0, 0, 159, 160, 5,
		73, 0, 0, 160, 161, 5, 110, 0, 0, 161, 162, 5, 116, 0, 0, 162, 200, 5,
		56, 0, 0, 163, 164, 5, 73, 0, 0, 164, 165, 5, 110, 0, 0, 165, 166, 5, 116,
		0, 0, 166, 167, 5, 49, 0, 0, 167, 200, 5, 54, 0, 0, 168, 169, 5, 73, 0,
		0, 169, 170, 5, 110, 0, 0, 170, 171, 5, 116, 0, 0, 171, 172, 5, 51, 0,
		0, 172, 200, 5, 50, 0, 0, 173, 174, 5, 73, 0, 0, 174, 175, 5, 110, 0, 0,
		175, 176, 5, 116, 0, 0, 176, 177, 5, 54, 0, 0, 177, 200, 5, 52, 0, 0, 178,
		179, 5, 73, 0, 0, 179, 180, 5, 110, 0, 0, 180, 200, 5, 116, 0, 0, 181,
		182, 5, 70, 0, 0, 182, 183, 5, 108, 0, 0, 183, 184, 5, 111, 0, 0, 184,
		185, 5, 97, 0, 0, 185, 186, 5, 116, 0, 0, 186, 187, 5, 51, 0, 0, 187, 200,
		5, 50, 0, 0, 188, 189, 5, 70, 0, 0, 189, 190, 5, 108, 0, 0, 190, 191, 5,
		111, 0, 0, 191, 192, 5, 97, 0, 0, 192, 193, 5, 116, 0, 0, 193, 194, 5,
		54, 0, 0, 194, 200, 5, 52, 0, 0, 195, 196, 5, 66, 0, 0, 196, 197, 5, 111,
		0, 0, 197, 198, 5, 111, 0, 0, 198, 200, 5, 108, 0, 0, 199, 132, 1, 0, 0,
		0, 199, 137, 1, 0, 0, 0, 199, 143, 1, 0, 0, 0, 199, 149, 1, 0, 0, 0, 199,
		155, 1, 0, 0, 0, 199, 159, 1, 0, 0, 0, 199, 163, 1, 0, 0, 0, 199, 168,
		1, 0, 0, 0, 199, 173, 1, 0, 0, 0, 199, 178, 1, 0, 0, 0, 199, 181, 1, 0,
		0, 0, 199, 188, 1, 0, 0, 0, 199, 195, 1, 0, 0, 0, 200, 40, 1, 0, 0, 0,
		201, 206, 3, 43, 21, 0, 202, 206, 3, 47, 23, 0, 203, 206, 3, 51, 25, 0,
		204, 206, 3, 55, 27, 0, 205, 201, 1, 0, 0, 0, 205, 202, 1, 0, 0, 0, 205,
		203, 1, 0, 0, 0, 205, 204, 1, 0, 0, 0, 206, 42, 1, 0, 0, 0, 207, 225, 3,
		45, 22, 0, 208, 210, 7, 0, 0, 0, 209, 208, 1, 0, 0, 0, 210, 213, 1, 0,
		0, 0, 211, 209, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 214, 1, 0, 0, 0,
		213, 211, 1, 0, 0, 0, 214, 215, 5, 46, 0, 0, 215, 225, 3, 45, 22, 0, 216,
		217, 3, 45, 22, 0, 217, 221, 5, 46, 0, 0, 218, 220, 7, 0, 0, 0, 219, 218,
		1, 0, 0, 0, 220, 223, 1, 0, 0, 0, 221, 219, 1, 0, 0, 0, 221, 222, 1, 0,
		0, 0, 222, 225, 1, 0, 0, 0, 223, 221, 1, 0, 0, 0, 224, 207, 1, 0, 0, 0,
		224, 211, 1, 0, 0, 0, 224, 216, 1, 0, 0, 0, 225, 44, 1, 0, 0, 0, 226, 230,
		7, 1, 0, 0, 227, 229, 7, 0, 0, 0, 228, 227, 1, 0, 0, 0, 229, 232, 1, 0,
		0, 0, 230, 228, 1, 0, 0, 0, 230, 231, 1, 0, 0, 0, 231, 46, 1, 0, 0, 0,
		232, 230, 1, 0, 0, 0, 233, 234, 5, 48, 0, 0, 234, 235, 5, 98, 0, 0, 235,
		253, 1, 0, 0, 0, 236, 254, 3, 49, 24, 0, 237, 239, 7, 2, 0, 0, 238, 237,
		1, 0, 0, 0, 239, 242, 1, 0, 0, 0, 240, 238, 1, 0, 0, 0, 240, 241, 1, 0,
		0, 0, 241, 243, 1, 0, 0, 0, 242, 240, 1, 0, 0, 0, 243, 244, 5, 46, 0, 0,
		244, 254, 3, 49, 24, 0, 245, 246, 3, 49, 24, 0, 246, 250, 5, 46, 0, 0,
		247, 249, 7, 2, 0, 0, 248, 247, 1, 0, 0, 0, 249, 252, 1, 0, 0, 0, 250,
		248, 1, 0, 0, 0, 250, 251, 1, 0, 0, 0, 251, 254, 1, 0, 0, 0, 252, 250,
		1, 0, 0, 0, 253, 236, 1, 0, 0, 0, 253, 240, 1, 0, 0, 0, 253, 245, 1, 0,
		0, 0, 254, 48, 1, 0, 0, 0, 255, 257, 7, 2, 0, 0, 256, 255, 1, 0, 0, 0,
		257, 260, 1, 0, 0, 0, 258, 256, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259,
		261, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 261, 265, 7, 3, 0, 0, 262, 264,
		7, 2, 0, 0, 263, 262, 1, 0, 0, 0, 264, 267, 1, 0, 0, 0, 265, 263, 1, 0,
		0, 0, 265, 266, 1, 0, 0, 0, 266, 50, 1, 0, 0, 0, 267, 265, 1, 0, 0, 0,
		268, 269, 5, 48, 0, 0, 269, 270, 5, 111, 0, 0, 270, 288, 1, 0, 0, 0, 271,
		289, 3, 53, 26, 0, 272, 274, 7, 4, 0, 0, 273, 272, 1, 0, 0, 0, 274, 277,
		1, 0, 0, 0, 275, 273, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276, 278, 1, 0,
		0, 0, 277, 275, 1, 0, 0, 0, 278, 279, 5, 46, 0, 0, 279, 289, 3, 53, 26,
		0, 280, 281, 3, 53, 26, 0, 281, 285, 5, 46, 0, 0, 282, 284, 7, 4, 0, 0,
		283, 282, 1, 0, 0, 0, 284, 287, 1, 0, 0, 0, 285, 283, 1, 0, 0, 0, 285,
		286, 1, 0, 0, 0, 286, 289, 1, 0, 0, 0, 287, 285, 1, 0, 0, 0, 288, 271,
		1, 0, 0, 0, 288, 275, 1, 0, 0, 0, 288, 280, 1, 0, 0, 0, 289, 52, 1, 0,
		0, 0, 290, 292, 7, 4, 0, 0, 291, 290, 1, 0, 0, 0, 292, 295, 1, 0, 0, 0,
		293, 291, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 296, 1, 0, 0, 0, 295,
		293, 1, 0, 0, 0, 296, 300, 7, 5, 0, 0, 297, 299, 7, 4, 0, 0, 298, 297,
		1, 0, 0, 0, 299, 302, 1, 0, 0, 0, 300, 298, 1, 0, 0, 0, 300, 301, 1, 0,
		0, 0, 301, 54, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 303, 304, 5, 48, 0, 0,
		304, 305, 5, 120, 0, 0, 305, 325, 1, 0, 0, 0, 306, 326, 3, 57, 28, 0, 307,
		310, 3, 59, 29, 0, 308, 310, 5, 95, 0, 0, 309, 307, 1, 0, 0, 0, 309, 308,
		1, 0, 0, 0, 310, 313, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 311, 312, 1, 0,
		0, 0, 312, 314, 1, 0, 0, 0, 313, 311, 1, 0, 0, 0, 314, 315, 5, 46, 0, 0,
		315, 326, 3, 57, 28, 0, 316, 317, 3, 57, 28, 0, 317, 322, 5, 46, 0, 0,
		318, 321, 3, 59, 29, 0, 319, 321, 5, 95, 0, 0, 320, 318, 1, 0, 0, 0, 320,
		319, 1, 0, 0, 0, 321, 324, 1, 0, 0, 0, 322, 320, 1, 0, 0, 0, 322, 323,
		1, 0, 0, 0, 323, 326, 1, 0, 0, 0, 324, 322, 1, 0, 0, 0, 325, 306, 1, 0,
		0, 0, 325, 311, 1, 0, 0, 0, 325, 316, 1, 0, 0, 0, 326, 56, 1, 0, 0, 0,
		327, 330, 3, 59, 29, 0, 328, 330, 5, 95, 0, 0, 329, 327, 1, 0, 0, 0, 329,
		328, 1, 0, 0, 0, 330, 333, 1, 0, 0, 0, 331, 329, 1, 0, 0, 0, 331, 332,
		1, 0, 0, 0, 332, 334, 1, 0, 0, 0, 333, 331, 1, 0, 0, 0, 334, 339, 3, 59,
		29, 0, 335, 338, 3, 59, 29, 0, 336, 338, 5, 95, 0, 0, 337, 335, 1, 0, 0,
		0, 337, 336, 1, 0, 0, 0, 338, 341, 1, 0, 0, 0, 339, 337, 1, 0, 0, 0, 339,
		340, 1, 0, 0, 0, 340, 58, 1, 0, 0, 0, 341, 339, 1, 0, 0, 0, 342, 343, 7,
		6, 0, 0, 343, 60, 1, 0, 0, 0, 344, 348, 7, 7, 0, 0, 345, 347, 7, 8, 0,
		0, 346, 345, 1, 0, 0, 0, 347, 350, 1, 0, 0, 0, 348, 346, 1, 0, 0, 0, 348,
		349, 1, 0, 0, 0, 349, 62, 1, 0, 0, 0, 350, 348, 1, 0, 0, 0, 351, 352, 5,
		40, 0, 0, 352, 64, 1, 0, 0, 0, 353, 354, 5, 41, 0, 0, 354, 66, 1, 0, 0,
		0, 355, 356, 5, 123, 0, 0, 356, 68, 1, 0, 0, 0, 357, 358, 5, 125, 0, 0,
		358, 70, 1, 0, 0, 0, 359, 360, 5, 59, 0, 0, 360, 72, 1, 0, 0, 0, 361, 363,
		7, 9, 0, 0, 362, 361, 1, 0, 0, 0, 362, 363, 1, 0, 0, 0, 363, 364, 1, 0,
		0, 0, 364, 366, 7, 10, 0, 0, 365, 362, 1, 0, 0, 0, 366, 367, 1, 0, 0, 0,
		367, 365, 1, 0, 0, 0, 367, 368, 1, 0, 0, 0, 368, 74, 1, 0, 0, 0, 369, 391,
		7, 11, 0, 0, 370, 371, 5, 47, 0, 0, 371, 372, 5, 42, 0, 0, 372, 376, 1,
		0, 0, 0, 373, 375, 9, 0, 0, 0, 374, 373, 1, 0, 0, 0, 375, 378, 1, 0, 0,
		0, 376, 377, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 377, 379, 1, 0, 0, 0, 378,
		376, 1, 0, 0, 0, 379, 380, 5, 42, 0, 0, 380, 391, 5, 47, 0, 0, 381, 382,
		5, 47, 0, 0, 382, 383, 5, 47, 0, 0, 383, 387, 1, 0, 0, 0, 384, 386, 8,
		10, 0, 0, 385, 384, 1, 0, 0, 0, 386, 389, 1, 0, 0, 0, 387, 385, 1, 0, 0,
		0, 387, 388, 1, 0, 0, 0, 388, 391, 1, 0, 0, 0, 389, 387, 1, 0, 0, 0, 390,
		369, 1, 0, 0, 0, 390, 370, 1, 0, 0, 0, 390, 381, 1, 0, 0, 0, 391, 392,
		1, 0, 0, 0, 392, 393, 6, 37, 0, 0, 393, 76, 1, 0, 0, 0, 32, 0, 199, 205,
		211, 221, 224, 230, 240, 250, 253, 258, 265, 275, 285, 288, 293, 300, 309,
		311, 320, 322, 325, 329, 331, 337, 339, 348, 362, 367, 376, 387, 390, 1,
		6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ZenithLexerInit initializes any static state used to implement ZenithLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewZenithLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ZenithLexerInit() {
	staticData := &ZenithLexerLexerStaticData
	staticData.once.Do(zenithlexerLexerInit)
}

// NewZenithLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewZenithLexer(input antlr.CharStream) *ZenithLexer {
	ZenithLexerInit()
	l := new(ZenithLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &ZenithLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "ZenithLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ZenithLexer tokens.
const (
	ZenithLexerOWN_PTR      = 1
	ZenithLexerNULL_OWN_PTR = 2
	ZenithLexerPTR          = 3
	ZenithLexerNULL_PTR     = 4
	ZenithLexerAT           = 5
	ZenithLexerBIT_NOT      = 6
	ZenithLexerNOT          = 7
	ZenithLexerPLUS         = 8
	ZenithLexerMINUS        = 9
	ZenithLexerTIMES        = 10
	ZenithLexerDIVIDE       = 11
	ZenithLexerREM          = 12
	ZenithLexerIF           = 13
	ZenithLexerELSE         = 14
	ZenithLexerTRUE         = 15
	ZenithLexerFALSE        = 16
	ZenithLexerNULL         = 17
	ZenithLexerASSIGN       = 18
	ZenithLexerINIT_ASSIGN  = 19
	ZenithLexerTYPE         = 20
	ZenithLexerNUM          = 21
	ZenithLexerID           = 22
	ZenithLexerLPAREN       = 23
	ZenithLexerRPAREN       = 24
	ZenithLexerLBRACE       = 25
	ZenithLexerRBRACE       = 26
	ZenithLexerSEMICOLON    = 27
	ZenithLexerNL           = 28
	ZenithLexerIGNORED      = 29
)
