// Code generated from ZenithLexer.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ZenithLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var ZenithLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func zenithlexerLexerInit() {
	staticData := &ZenithLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'='", "':='", "'+'", "'-'", "'*'", "'/'", "'%'", "'if'", "'else'",
		"'true'", "'false'", "", "", "", "'('", "')'", "'{'", "'}'", "';'",
	}
	staticData.SymbolicNames = []string{
		"", "ASSIGN", "INIT_ASSIGN", "PLUS", "MINUS", "TIMES", "DIVIDE", "REM",
		"IF", "ELSE", "TRUE", "FALSE", "TYPE", "NUM", "ID", "LPAREN", "RPAREN",
		"LBRACE", "RBRACE", "SEMICOLON", "NL", "IGNORED",
	}
	staticData.RuleNames = []string{
		"ASSIGN", "INIT_ASSIGN", "PLUS", "MINUS", "TIMES", "DIVIDE", "REM",
		"IF", "ELSE", "TRUE", "FALSE", "TYPE", "NUM", "DEC_NUM", "DEC_SEG",
		"BIN_NUM", "BIN_SEG", "OCT_NUM", "OCT_SEG", "HEX_NUM", "HEX_SEG", "HEX_DIGIT",
		"ID", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", "NL", "IGNORED",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 21, 357, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 1, 0, 1, 0, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1,
		6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 11, 3, 11, 163, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 169, 8, 12,
		1, 13, 1, 13, 5, 13, 173, 8, 13, 10, 13, 12, 13, 176, 9, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 5, 13, 183, 8, 13, 10, 13, 12, 13, 186, 9, 13,
		3, 13, 188, 8, 13, 1, 14, 1, 14, 5, 14, 192, 8, 14, 10, 14, 12, 14, 195,
		9, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 202, 8, 15, 10, 15, 12,
		15, 205, 9, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 212, 8, 15, 10,
		15, 12, 15, 215, 9, 15, 3, 15, 217, 8, 15, 1, 16, 5, 16, 220, 8, 16, 10,
		16, 12, 16, 223, 9, 16, 1, 16, 1, 16, 5, 16, 227, 8, 16, 10, 16, 12, 16,
		230, 9, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 5, 17, 237, 8, 17, 10, 17,
		12, 17, 240, 9, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 5, 17, 247, 8, 17,
		10, 17, 12, 17, 250, 9, 17, 3, 17, 252, 8, 17, 1, 18, 5, 18, 255, 8, 18,
		10, 18, 12, 18, 258, 9, 18, 1, 18, 1, 18, 5, 18, 262, 8, 18, 10, 18, 12,
		18, 265, 9, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 273, 8,
		19, 10, 19, 12, 19, 276, 9, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		5, 19, 284, 8, 19, 10, 19, 12, 19, 287, 9, 19, 3, 19, 289, 8, 19, 1, 20,
		1, 20, 5, 20, 293, 8, 20, 10, 20, 12, 20, 296, 9, 20, 1, 20, 1, 20, 1,
		20, 5, 20, 301, 8, 20, 10, 20, 12, 20, 304, 9, 20, 1, 21, 1, 21, 1, 22,
		1, 22, 5, 22, 310, 8, 22, 10, 22, 12, 22, 313, 9, 22, 1, 23, 1, 23, 1,
		24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 3, 28, 326,
		8, 28, 1, 28, 4, 28, 329, 8, 28, 11, 28, 12, 28, 330, 1, 29, 1, 29, 1,
		29, 1, 29, 1, 29, 5, 29, 338, 8, 29, 10, 29, 12, 29, 341, 9, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 5, 29, 349, 8, 29, 10, 29, 12, 29, 352,
		9, 29, 3, 29, 354, 8, 29, 1, 29, 1, 29, 1, 339, 0, 30, 1, 1, 3, 2, 5, 3,
		7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13,
		27, 0, 29, 0, 31, 0, 33, 0, 35, 0, 37, 0, 39, 0, 41, 0, 43, 0, 45, 14,
		47, 15, 49, 16, 51, 17, 53, 18, 55, 19, 57, 20, 59, 21, 1, 0, 12, 2, 0,
		48, 57, 95, 95, 1, 0, 48, 57, 2, 0, 48, 49, 95, 95, 1, 0, 48, 49, 2, 0,
		48, 55, 95, 95, 1, 0, 48, 55, 3, 0, 48, 57, 65, 70, 97, 102, 3, 0, 65,
		90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 1, 0, 13, 13,
		1, 0, 10, 10, 2, 0, 9, 9, 32, 32, 396, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0,
		0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0,
		0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0,
		0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 45, 1,
		0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53,
		1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 1,
		61, 1, 0, 0, 0, 3, 63, 1, 0, 0, 0, 5, 66, 1, 0, 0, 0, 7, 68, 1, 0, 0, 0,
		9, 70, 1, 0, 0, 0, 11, 72, 1, 0, 0, 0, 13, 74, 1, 0, 0, 0, 15, 76, 1, 0,
		0, 0, 17, 79, 1, 0, 0, 0, 19, 84, 1, 0, 0, 0, 21, 89, 1, 0, 0, 0, 23, 162,
		1, 0, 0, 0, 25, 168, 1, 0, 0, 0, 27, 187, 1, 0, 0, 0, 29, 189, 1, 0, 0,
		0, 31, 196, 1, 0, 0, 0, 33, 221, 1, 0, 0, 0, 35, 231, 1, 0, 0, 0, 37, 256,
		1, 0, 0, 0, 39, 266, 1, 0, 0, 0, 41, 294, 1, 0, 0, 0, 43, 305, 1, 0, 0,
		0, 45, 307, 1, 0, 0, 0, 47, 314, 1, 0, 0, 0, 49, 316, 1, 0, 0, 0, 51, 318,
		1, 0, 0, 0, 53, 320, 1, 0, 0, 0, 55, 322, 1, 0, 0, 0, 57, 328, 1, 0, 0,
		0, 59, 353, 1, 0, 0, 0, 61, 62, 5, 61, 0, 0, 62, 2, 1, 0, 0, 0, 63, 64,
		5, 58, 0, 0, 64, 65, 5, 61, 0, 0, 65, 4, 1, 0, 0, 0, 66, 67, 5, 43, 0,
		0, 67, 6, 1, 0, 0, 0, 68, 69, 5, 45, 0, 0, 69, 8, 1, 0, 0, 0, 70, 71, 5,
		42, 0, 0, 71, 10, 1, 0, 0, 0, 72, 73, 5, 47, 0, 0, 73, 12, 1, 0, 0, 0,
		74, 75, 5, 37, 0, 0, 75, 14, 1, 0, 0, 0, 76, 77, 5, 105, 0, 0, 77, 78,
		5, 102, 0, 0, 78, 16, 1, 0, 0, 0, 79, 80, 5, 101, 0, 0, 80, 81, 5, 108,
		0, 0, 81, 82, 5, 115, 0, 0, 82, 83, 5, 101, 0, 0, 83, 18, 1, 0, 0, 0, 84,
		85, 5, 116, 0, 0, 85, 86, 5, 114, 0, 0, 86, 87, 5, 117, 0, 0, 87, 88, 5,
		101, 0, 0, 88, 20, 1, 0, 0, 0, 89, 90, 5, 102, 0, 0, 90, 91, 5, 97, 0,
		0, 91, 92, 5, 108, 0, 0, 92, 93, 5, 115, 0, 0, 93, 94, 5, 101, 0, 0, 94,
		22, 1, 0, 0, 0, 95, 96, 5, 85, 0, 0, 96, 97, 5, 73, 0, 0, 97, 98, 5, 110,
		0, 0, 98, 99, 5, 116, 0, 0, 99, 163, 5, 56, 0, 0, 100, 101, 5, 85, 0, 0,
		101, 102, 5, 73, 0, 0, 102, 103, 5, 110, 0, 0, 103, 104, 5, 116, 0, 0,
		104, 105, 5, 49, 0, 0, 105, 163, 5, 54, 0, 0, 106, 107, 5, 85, 0, 0, 107,
		108, 5, 73, 0, 0, 108, 109, 5, 110, 0, 0, 109, 110, 5, 116, 0, 0, 110,
		111, 5, 51, 0, 0, 111, 163, 5, 50, 0, 0, 112, 113, 5, 85, 0, 0, 113, 114,
		5, 73, 0, 0, 114, 115, 5, 110, 0, 0, 115, 116, 5, 116, 0, 0, 116, 117,
		5, 54, 0, 0, 117, 163, 5, 52, 0, 0, 118, 119, 5, 85, 0, 0, 119, 120, 5,
		73, 0, 0, 120, 121, 5, 110, 0, 0, 121, 163, 5, 116, 0, 0, 122, 123, 5,
		73, 0, 0, 123, 124, 5, 110, 0, 0, 124, 125, 5, 116, 0, 0, 125, 163, 5,
		56, 0, 0, 126, 127, 5, 73, 0, 0, 127, 128, 5, 110, 0, 0, 128, 129, 5, 116,
		0, 0, 129, 130, 5, 49, 0, 0, 130, 163, 5, 54, 0, 0, 131, 132, 5, 73, 0,
		0, 132, 133, 5, 110, 0, 0, 133, 134, 5, 116, 0, 0, 134, 135, 5, 51, 0,
		0, 135, 163, 5, 50, 0, 0, 136, 137, 5, 73, 0, 0, 137, 138, 5, 110, 0, 0,
		138, 139, 5, 116, 0, 0, 139, 140, 5, 54, 0, 0, 140, 163, 5, 52, 0, 0, 141,
		142, 5, 73, 0, 0, 142, 143, 5, 110, 0, 0, 143, 163, 5, 116, 0, 0, 144,
		145, 5, 70, 0, 0, 145, 146, 5, 108, 0, 0, 146, 147, 5, 111, 0, 0, 147,
		148, 5, 97, 0, 0, 148, 149, 5, 116, 0, 0, 149, 150, 5, 51, 0, 0, 150, 163,
		5, 50, 0, 0, 151, 152, 5, 70, 0, 0, 152, 153, 5, 108, 0, 0, 153, 154, 5,
		111, 0, 0, 154, 155, 5, 97, 0, 0, 155, 156, 5, 116, 0, 0, 156, 157, 5,
		54, 0, 0, 157, 163, 5, 52, 0, 0, 158, 159, 5, 66, 0, 0, 159, 160, 5, 111,
		0, 0, 160, 161, 5, 111, 0, 0, 161, 163, 5, 108, 0, 0, 162, 95, 1, 0, 0,
		0, 162, 100, 1, 0, 0, 0, 162, 106, 1, 0, 0, 0, 162, 112, 1, 0, 0, 0, 162,
		118, 1, 0, 0, 0, 162, 122, 1, 0, 0, 0, 162, 126, 1, 0, 0, 0, 162, 131,
		1, 0, 0, 0, 162, 136, 1, 0, 0, 0, 162, 141, 1, 0, 0, 0, 162, 144, 1, 0,
		0, 0, 162, 151, 1, 0, 0, 0, 162, 158, 1, 0, 0, 0, 163, 24, 1, 0, 0, 0,
		164, 169, 3, 27, 13, 0, 165, 169, 3, 31, 15, 0, 166, 169, 3, 35, 17, 0,
		167, 169, 3, 39, 19, 0, 168, 164, 1, 0, 0, 0, 168, 165, 1, 0, 0, 0, 168,
		166, 1, 0, 0, 0, 168, 167, 1, 0, 0, 0, 169, 26, 1, 0, 0, 0, 170, 188, 3,
		29, 14, 0, 171, 173, 7, 0, 0, 0, 172, 171, 1, 0, 0, 0, 173, 176, 1, 0,
		0, 0, 174, 172, 1, 0, 0, 0, 174, 175, 1, 0, 0, 0, 175, 177, 1, 0, 0, 0,
		176, 174, 1, 0, 0, 0, 177, 178, 5, 46, 0, 0, 178, 188, 3, 29, 14, 0, 179,
		180, 3, 29, 14, 0, 180, 184, 5, 46, 0, 0, 181, 183, 7, 0, 0, 0, 182, 181,
		1, 0, 0, 0, 183, 186, 1, 0, 0, 0, 184, 182, 1, 0, 0, 0, 184, 185, 1, 0,
		0, 0, 185, 188, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 187, 170, 1, 0, 0, 0,
		187, 174, 1, 0, 0, 0, 187, 179, 1, 0, 0, 0, 188, 28, 1, 0, 0, 0, 189, 193,
		7, 1, 0, 0, 190, 192, 7, 0, 0, 0, 191, 190, 1, 0, 0, 0, 192, 195, 1, 0,
		0, 0, 193, 191, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 30, 1, 0, 0, 0,
		195, 193, 1, 0, 0, 0, 196, 197, 5, 48, 0, 0, 197, 198, 5, 98, 0, 0, 198,
		216, 1, 0, 0, 0, 199, 217, 3, 33, 16, 0, 200, 202, 7, 2, 0, 0, 201, 200,
		1, 0, 0, 0, 202, 205, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 203, 204, 1, 0,
		0, 0, 204, 206, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 207, 5, 46, 0, 0,
		207, 217, 3, 33, 16, 0, 208, 209, 3, 33, 16, 0, 209, 213, 5, 46, 0, 0,
		210, 212, 7, 2, 0, 0, 211, 210, 1, 0, 0, 0, 212, 215, 1, 0, 0, 0, 213,
		211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 217, 1, 0, 0, 0, 215, 213,
		1, 0, 0, 0, 216, 199, 1, 0, 0, 0, 216, 203, 1, 0, 0, 0, 216, 208, 1, 0,
		0, 0, 217, 32, 1, 0, 0, 0, 218, 220, 7, 2, 0, 0, 219, 218, 1, 0, 0, 0,
		220, 223, 1, 0, 0, 0, 221, 219, 1, 0, 0, 0, 221, 222, 1, 0, 0, 0, 222,
		224, 1, 0, 0, 0, 223, 221, 1, 0, 0, 0, 224, 228, 7, 3, 0, 0, 225, 227,
		7, 2, 0, 0, 226, 225, 1, 0, 0, 0, 227, 230, 1, 0, 0, 0, 228, 226, 1, 0,
		0, 0, 228, 229, 1, 0, 0, 0, 229, 34, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0,
		231, 232, 5, 48, 0, 0, 232, 233, 5, 111, 0, 0, 233, 251, 1, 0, 0, 0, 234,
		252, 3, 37, 18, 0, 235, 237, 7, 4, 0, 0, 236, 235, 1, 0, 0, 0, 237, 240,
		1, 0, 0, 0, 238, 236, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 241, 1, 0,
		0, 0, 240, 238, 1, 0, 0, 0, 241, 242, 5, 46, 0, 0, 242, 252, 3, 37, 18,
		0, 243, 244, 3, 37, 18, 0, 244, 248, 5, 46, 0, 0, 245, 247, 7, 4, 0, 0,
		246, 245, 1, 0, 0, 0, 247, 250, 1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 248,
		249, 1, 0, 0, 0, 249, 252, 1, 0, 0, 0, 250, 248, 1, 0, 0, 0, 251, 234,
		1, 0, 0, 0, 251, 238, 1, 0, 0, 0, 251, 243, 1, 0, 0, 0, 252, 36, 1, 0,
		0, 0, 253, 255, 7, 4, 0, 0, 254, 253, 1, 0, 0, 0, 255, 258, 1, 0, 0, 0,
		256, 254, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 259, 1, 0, 0, 0, 258,
		256, 1, 0, 0, 0, 259, 263, 7, 5, 0, 0, 260, 262, 7, 4, 0, 0, 261, 260,
		1, 0, 0, 0, 262, 265, 1, 0, 0, 0, 263, 261, 1, 0, 0, 0, 263, 264, 1, 0,
		0, 0, 264, 38, 1, 0, 0, 0, 265, 263, 1, 0, 0, 0, 266, 267, 5, 48, 0, 0,
		267, 268, 5, 120, 0, 0, 268, 288, 1, 0, 0, 0, 269, 289, 3, 41, 20, 0, 270,
		273, 3, 43, 21, 0, 271, 273, 5, 95, 0, 0, 272, 270, 1, 0, 0, 0, 272, 271,
		1, 0, 0, 0, 273, 276, 1, 0, 0, 0, 274, 272, 1, 0, 0, 0, 274, 275, 1, 0,
		0, 0, 275, 277, 1, 0, 0, 0, 276, 274, 1, 0, 0, 0, 277, 278, 5, 46, 0, 0,
		278, 289, 3, 41, 20, 0, 279, 280, 3, 41, 20, 0, 280, 285, 5, 46, 0, 0,
		281, 284, 3, 43, 21, 0, 282, 284, 5, 95, 0, 0, 283, 281, 1, 0, 0, 0, 283,
		282, 1, 0, 0, 0, 284, 287, 1, 0, 0, 0, 285, 283, 1, 0, 0, 0, 285, 286,
		1, 0, 0, 0, 286, 289, 1, 0, 0, 0, 287, 285, 1, 0, 0, 0, 288, 269, 1, 0,
		0, 0, 288, 274, 1, 0, 0, 0, 288, 279, 1, 0, 0, 0, 289, 40, 1, 0, 0, 0,
		290, 293, 3, 43, 21, 0, 291, 293, 5, 95, 0, 0, 292, 290, 1, 0, 0, 0, 292,
		291, 1, 0, 0, 0, 293, 296, 1, 0, 0, 0, 294, 292, 1, 0, 0, 0, 294, 295,
		1, 0, 0, 0, 295, 297, 1, 0, 0, 0, 296, 294, 1, 0, 0, 0, 297, 302, 3, 43,
		21, 0, 298, 301, 3, 43, 21, 0, 299, 301, 5, 95, 0, 0, 300, 298, 1, 0, 0,
		0, 300, 299, 1, 0, 0, 0, 301, 304, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 302,
		303, 1, 0, 0, 0, 303, 42, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 305, 306, 7,
		6, 0, 0, 306, 44, 1, 0, 0, 0, 307, 311, 7, 7, 0, 0, 308, 310, 7, 8, 0,
		0, 309, 308, 1, 0, 0, 0, 310, 313, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 311,
		312, 1, 0, 0, 0, 312, 46, 1, 0, 0, 0, 313, 311, 1, 0, 0, 0, 314, 315, 5,
		40, 0, 0, 315, 48, 1, 0, 0, 0, 316, 317, 5, 41, 0, 0, 317, 50, 1, 0, 0,
		0, 318, 319, 5, 123, 0, 0, 319, 52, 1, 0, 0, 0, 320, 321, 5, 125, 0, 0,
		321, 54, 1, 0, 0, 0, 322, 323, 5, 59, 0, 0, 323, 56, 1, 0, 0, 0, 324, 326,
		7, 9, 0, 0, 325, 324, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 327, 1, 0,
		0, 0, 327, 329, 7, 10, 0, 0, 328, 325, 1, 0, 0, 0, 329, 330, 1, 0, 0, 0,
		330, 328, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331, 58, 1, 0, 0, 0, 332, 354,
		7, 11, 0, 0, 333, 334, 5, 47, 0, 0, 334, 335, 5, 42, 0, 0, 335, 339, 1,
		0, 0, 0, 336, 338, 9, 0, 0, 0, 337, 336, 1, 0, 0, 0, 338, 341, 1, 0, 0,
		0, 339, 340, 1, 0, 0, 0, 339, 337, 1, 0, 0, 0, 340, 342, 1, 0, 0, 0, 341,
		339, 1, 0, 0, 0, 342, 343, 5, 42, 0, 0, 343, 354, 5, 47, 0, 0, 344, 345,
		5, 47, 0, 0, 345, 346, 5, 47, 0, 0, 346, 350, 1, 0, 0, 0, 347, 349, 8,
		10, 0, 0, 348, 347, 1, 0, 0, 0, 349, 352, 1, 0, 0, 0, 350, 348, 1, 0, 0,
		0, 350, 351, 1, 0, 0, 0, 351, 354, 1, 0, 0, 0, 352, 350, 1, 0, 0, 0, 353,
		332, 1, 0, 0, 0, 353, 333, 1, 0, 0, 0, 353, 344, 1, 0, 0, 0, 354, 355,
		1, 0, 0, 0, 355, 356, 6, 29, 0, 0, 356, 60, 1, 0, 0, 0, 32, 0, 162, 168,
		174, 184, 187, 193, 203, 213, 216, 221, 228, 238, 248, 251, 256, 263, 272,
		274, 283, 285, 288, 292, 294, 300, 302, 311, 325, 330, 339, 350, 353, 1,
		6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ZenithLexerInit initializes any static state used to implement ZenithLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewZenithLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ZenithLexerInit() {
	staticData := &ZenithLexerLexerStaticData
	staticData.once.Do(zenithlexerLexerInit)
}

// NewZenithLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewZenithLexer(input antlr.CharStream) *ZenithLexer {
	ZenithLexerInit()
	l := new(ZenithLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &ZenithLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "ZenithLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ZenithLexer tokens.
const (
	ZenithLexerASSIGN      = 1
	ZenithLexerINIT_ASSIGN = 2
	ZenithLexerPLUS        = 3
	ZenithLexerMINUS       = 4
	ZenithLexerTIMES       = 5
	ZenithLexerDIVIDE      = 6
	ZenithLexerREM         = 7
	ZenithLexerIF          = 8
	ZenithLexerELSE        = 9
	ZenithLexerTRUE        = 10
	ZenithLexerFALSE       = 11
	ZenithLexerTYPE        = 12
	ZenithLexerNUM         = 13
	ZenithLexerID          = 14
	ZenithLexerLPAREN      = 15
	ZenithLexerRPAREN      = 16
	ZenithLexerLBRACE      = 17
	ZenithLexerRBRACE      = 18
	ZenithLexerSEMICOLON   = 19
	ZenithLexerNL          = 20
	ZenithLexerIGNORED     = 21
)
