// self: the current non-terminal
// next: the next non-terminal (not including parts)

expr : next ;

conditionExpr : next ["if" NL? next NL? "else" NL? self] ;

logicOrExpr : [self "or" NL?] next ;

logicXorExpr : [self "xor" NL?] next ;

logicAndExpr : [self "and" NL?] next ;

compareExpr : next (("<" | ">" | "<=" | ">=" | "==" | "!=") NL? next)* ;

bitOrExpr : [self "|" NL?] next ;

bitXorExpr : [self "$" NL?] next ;

bitAndExpr : [self "&" NL?] next ;

bitShiftExpr : [self ("<<" | ">>") NL?] next ;

addExpr : [self ("+" | "-") NL?] next ;

multiplyExpr : [self ("*" | "/" | "%") NL?] next ;

exponentExpr : next ["^" NL? self] ;

prefixExpr : ("+" | "-" | "~" | "not" | "$" | "&" | "#") NL? self
           | next
           ;

postfixExpr : self "!"
            | self NL? "." NL? ID
            | self "(" [funArgs] ")"
            | next
            ;

primaryExpr : NUM
            | CHAR
            | STR
            | ID
            | ("true" | "false" | "none" | "undefined")
            | parenExpr
            ;

parenExpr : "(" NL? expr NL? ")"
