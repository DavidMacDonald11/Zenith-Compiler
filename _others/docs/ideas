Manual Memory Management Made Easier
All based around type inference

x := 15 // creates an int on the stack; Int
stackx := &x // creates a int ptr; &Int
heapx := alloc(x) // copies x onto the heap; #Int

func inc(n &Int) { n++ }
inc(stackx) // valid
inc(heapx) // valid

// only #Types can be freed
anyx &Int := heapx // valid; copies heapx as &Int; cannot be freed using anyx
heapx2 #Int := anyx // invalid

@anyx // gets value at address; Int
@heapx // gets value at address; Int

dealloc(anyx) // invalid
dealloc(heapx) // vaild

ptr := &x
ptr? // returns ptr != null
